#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è VPN-–±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: RUCODER (https://—Ä—É–∫–æ–¥–µ—Ä.—Ä—Ñ/vpn)
"""

import asyncio
import logging
import psutil
import subprocess
import os
import time
from datetime import datetime
import aiohttp

from config import (
    CPU_THRESHOLD,
    MEMORY_THRESHOLD,
    DISK_THRESHOLD,
    ADMIN_IDS
)
from database.models import ServerMetricsModel, NotificationModel

logger = logging.getLogger(__name__)

class ServerMonitor:
    def __init__(self, bot=None):
        self.bot = bot
        self.metrics_model = ServerMetricsModel()
        self.notification_model = NotificationModel()
        self.previous_network_io = psutil.net_io_counters()
        self.previous_time = time.time()
        self.monitoring_interval = 300  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def get_system_metrics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            cpu_usage = psutil.cpu_percent(interval=1)
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            memory_usage = memory.percent
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
            disk = psutil.disk_usage('/')
            disk_usage = disk.percent
            
            # –°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ (—Ä–∞–∑–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º)
            current_network_io = psutil.net_io_counters()
            current_time = time.time()
            
            time_diff = current_time - self.previous_time
            
            network_in = (current_network_io.bytes_recv - self.previous_network_io.bytes_recv) / time_diff
            network_out = (current_network_io.bytes_sent - self.previous_network_io.bytes_sent) / time_diff
            
            self.previous_network_io = current_network_io
            self.previous_time = current_time
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WireGuard
            active_connections = 0
            try:
                wg_show = subprocess.run(
                    ['wg', 'show'],
                    capture_output=True,
                    text=True,
                    check=True
                )
                
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ "peer:"
                active_connections = wg_show.stdout.count('peer:')
            except subprocess.CalledProcessError:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö WireGuard")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            
            return {
                'cpu_usage': cpu_usage,
                'memory_usage': memory_usage,
                'disk_usage': disk_usage,
                'network_in': network_in,
                'network_out': network_out,
                'active_connections': active_connections
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return None
    
    async def check_thresholds(self, metrics):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫"""
        warnings = []
        
        if metrics['cpu_usage'] > CPU_THRESHOLD:
            warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {metrics['cpu_usage']}% (–ø–æ—Ä–æ–≥: {CPU_THRESHOLD}%)")
        
        if metrics['memory_usage'] > MEMORY_THRESHOLD:
            warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics['memory_usage']}% (–ø–æ—Ä–æ–≥: {MEMORY_THRESHOLD}%)")
        
        if metrics['disk_usage'] > DISK_THRESHOLD:
            warnings.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {metrics['disk_usage']}% (–ø–æ—Ä–æ–≥: {DISK_THRESHOLD}%)")
        
        return warnings
    
    async def send_alerts(self, warnings):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        if not warnings:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ï–†–í–ï–†–ê ({current_time}):\n\n"
        message += "\n".join(warnings)
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.notification_model.create_notification(
            'server_alert',
            message,
            'high'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        if self.bot:
            for admin_id in ADMIN_IDS:
                try:
                    await self.bot.send_message(admin_id, message)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    async def log_metrics_to_db(self, metrics):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self.metrics_model.log_metrics(
                metrics['cpu_usage'],
                metrics['memory_usage'],
                metrics['disk_usage'],
                metrics['network_in'],
                metrics['network_out'],
                metrics['active_connections']
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def cleanup_old_metrics(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self.metrics_model.delete_old_metrics()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def monitor_once(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = await self.get_system_metrics()
            if not metrics:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            warnings = await self.check_thresholds(metrics)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if warnings:
                await self.send_alerts(warnings)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.log_metrics_to_db(metrics)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def start_monitoring_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        self.previous_network_io = psutil.net_io_counters()
        self.previous_time = time.time()
        
        try:
            while True:
                await self.monitor_once()
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
                if datetime.now().hour == 2 and datetime.now().minute < 5:
                    await self.cleanup_old_metrics()
                
                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(self.monitoring_interval)
        except asyncio.CancelledError:
            logger.info("–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

async def start_monitoring(bot=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞"""
    monitor = ServerMonitor(bot)
    await monitor.start_monitoring_loop()
