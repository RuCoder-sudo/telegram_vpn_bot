#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è VPN-–±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: RUCODER (https://—Ä—É–∫–æ–¥–µ—Ä.—Ä—Ñ/vpn)
"""

import asyncio
import time
import aiohttp
import logging
from statistics import mean
from typing import Dict, List, Tuple

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
SPEED_TEST_SERVERS = [
    "https://speed.cloudflare.com/__down?bytes=10000000",  # 10MB —Ñ–∞–π–ª –æ—Ç Cloudflare
    "https://speedtest.selectel.ru/10MB.bin",  # 10MB —Ñ–∞–π–ª –æ—Ç Selectel
    "https://fra1.digitaloceanspaces.com/speedtest/10mb.bin"  # 10MB —Ñ–∞–π–ª –æ—Ç DigitalOcean
]

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞
PING_SERVERS = [
    "https://www.google.com",
    "https://yandex.ru",
    "https://cloudflare.com",
    "https://vk.com"
]

class SpeedTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        self.last_results = {}
    
    async def measure_ping(self, url: str, count: int = 3) -> Tuple[float, float]:
        """
        –ò–∑–º–µ—Ä—è–µ—Ç –ø–∏–Ω–≥ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            url: URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Å—Ä–µ–¥–Ω–∏–π_–ø–∏–Ω–≥, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π_–ø–∏–Ω–≥)
        """
        ping_results = []
        
        try:
            async with aiohttp.ClientSession() as session:
                for _ in range(count):
                    start_time = time.time()
                    
                    try:
                        async with session.get(url, timeout=5) as response:
                            await response.text()
                            end_time = time.time()
                            ping_time = (end_time - start_time) * 1000  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –º—Å
                            ping_results.append(ping_time)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞ –¥–æ {url}: {e}")
                        continue
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.2)
                
                if ping_results:
                    return mean(ping_results), min(ping_results)
                else:
                    return 0, 0
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞ –¥–æ {url}: {e}")
            return 0, 0
    
    async def measure_download_speed(self, url: str) -> float:
        """
        –ò–∑–º–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            
        Returns:
            –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ú–±–∏—Ç/—Å
        """
        try:
            start_time = time.time()
            total_bytes = 0
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    while True:
                        chunk = await response.content.read(1024)
                        if not chunk:
                            break
                        total_bytes += len(chunk)
            
            end_time = time.time()
            duration = end_time - start_time
            
            if duration > 0:
                # –ü–µ—Ä–µ–≤–æ–¥ –±–∞–π—Ç –≤ –±–∏—Ç—ã (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 8) –∏ –∑–∞—Ç–µ–º –∏–∑ –±–∏—Ç/c –≤ –ú–±–∏—Ç/—Å (–¥–µ–ª–∏–º –Ω–∞ 1_000_000)
                mbps = (total_bytes * 8) / (duration * 1_000_000)
                return mbps
            else:
                return 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å {url}: {e}")
            return 0
    
    async def run_full_test(self) -> Dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        results = {
            "ping": {},
            "download": {},
            "average": {
                "ping": 0,
                "download": 0
            },
            "timestamp": time.time()
        }
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏–Ω–≥–∞
        ping_tasks = []
        for server_url in PING_SERVERS:
            server_name = server_url.split("//")[1].split("/")[0]
            ping_tasks.append(self.measure_ping(server_url))
        
        ping_results = await asyncio.gather(*ping_tasks)
        
        valid_pings = []
        for i, (avg_ping, min_ping) in enumerate(ping_results):
            if avg_ping > 0:
                server_name = PING_SERVERS[i].split("//")[1].split("/")[0]
                results["ping"][server_name] = {
                    "avg": round(avg_ping, 1),
                    "min": round(min_ping, 1)
                }
                valid_pings.append(avg_ping)
        
        if valid_pings:
            results["average"]["ping"] = round(mean(valid_pings), 1)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        download_tasks = []
        for server_url in SPEED_TEST_SERVERS:
            download_tasks.append(self.measure_download_speed(server_url))
        
        download_results = await asyncio.gather(*download_tasks)
        
        valid_speeds = []
        for i, speed in enumerate(download_results):
            if speed > 0:
                server_name = SPEED_TEST_SERVERS[i].split("//")[1].split("/")[0]
                results["download"][server_name] = round(speed, 2)
                valid_speeds.append(speed)
        
        if valid_speeds:
            results["average"]["download"] = round(mean(valid_speeds), 2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.last_results = results
        return results
    
    def format_results(self, results: Dict = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        if results is None:
            results = self.last_results
            
        if not results:
            return "üî¥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏"
        
        text = "üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏:\n\n"
        
        # –°—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–≥
        text += f"üì∂ –ü–∏–Ω–≥: {results['average']['ping']} –º—Å\n"
        
        # –î–µ—Ç–∞–ª–∏ –ø–∏–Ω–≥–∞
        text += "\n–î–µ—Ç–∞–ª–∏ –ø–∏–Ω–≥–∞:\n"
        for server, ping_data in results["ping"].items():
            text += f"  ‚Ä¢ {server}: {ping_data['avg']} –º—Å (–º–∏–Ω: {ping_data['min']} –º—Å)\n"
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        text += f"\n‚¨áÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {results['average']['download']} –ú–±–∏—Ç/—Å\n"
        
        # –î–µ—Ç–∞–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        text += "\n–î–µ—Ç–∞–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
        for server, speed in results["download"].items():
            text += f"  ‚Ä¢ {server}: {speed} –ú–±–∏—Ç/—Å\n"
        
        return text


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –±–æ—Ç–∞
speed_tester = SpeedTester()

async def run_speed_test():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    results = await speed_tester.run_full_test()
    return speed_tester.format_results(results)