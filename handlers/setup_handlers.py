#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è VPN-–±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: RUCODER (https://—Ä—É–∫–æ–¥–µ—Ä.—Ä—Ñ/vpn)
"""

import os
import logging
import asyncio
import subprocess
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import (
    ADMIN_IDS, BOT_VERSION, COPYRIGHT, SUPPORT_CONTACT,
    WG_CONFIG_PATH, WG_SERVER_PRIVKEY_PATH, WG_SERVER_PUBKEY_PATH
)
from keyboards.setup_kb import setup_main_kb, setup_confirm_kb, back_to_setup_kb
from database.models import SettingsModel
from utils.vpn_manager import VPNManager

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–µ–ª–µ–π
settings_model = SettingsModel()
vpn_manager = VPNManager()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class SetupStates(StatesGroup):
    waiting_confirmation = State()
    waiting_server_ip = State()
    waiting_server_port = State()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@router.message(Command("setup"))
async def cmd_setup(message: Message):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    await message.answer(
        f"üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPN-—Å–µ—Ä–≤–µ—Ä–∞ RuCoder\n"
        f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n\n"
        f"–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ "
        f"–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã VPN-—Å–µ—Ä–≤–µ—Ä–∞.\n\n"
        f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=setup_main_kb()
    )

@router.callback_query(F.data == "setup_check_wireguard")
async def cb_check_wireguard(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ WireGuard...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ WireGuard
    try:
        wg_installed = subprocess.run(['which', 'wg'], stdout=subprocess.PIPE).returncode == 0
    except Exception:
        wg_installed = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    config_exists = os.path.exists(WG_CONFIG_PATH)
    privkey_exists = os.path.exists(WG_SERVER_PRIVKEY_PATH)
    pubkey_exists = os.path.exists(WG_SERVER_PUBKEY_PATH)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã
    wg_service_status = vpn_manager.check_wireguard_status()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ WireGuard:\n\n"
    
    text += f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard: {'‚úÖ' if wg_installed else '‚ùå'}\n"
    text += f"üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {'‚úÖ' if config_exists else '‚ùå'}\n"
    text += f"üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞: {'‚úÖ' if privkey_exists else '‚ùå'}\n"
    text += f"üîë –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞: {'‚úÖ' if pubkey_exists else '‚ùå'}\n"
    text += f"üöÄ –°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã: {'‚úÖ –∞–∫—Ç–∏–≤–Ω–∞' if wg_service_status['is_active'] else '‚ùå –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
    
    if not wg_installed or not config_exists or not privkey_exists or not pubkey_exists:
        text += "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π WireGuard.\n"
        text += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É WireGuard."
    elif not wg_service_status['is_active']:
        text += "‚ö†Ô∏è –°–ª—É–∂–±–∞ WireGuard –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n"
        text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É."
    else:
        text += "‚úÖ WireGuard —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
    
    await callback.message.edit_text(
        text,
        reply_markup=setup_main_kb()
    )

@router.callback_query(F.data == "setup_restart_wireguard")
async def cb_restart_wireguard(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É WireGuard?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –≤—Å–µ—Ö VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.",
        reply_markup=setup_confirm_kb("confirm_restart_wireguard")
    )

@router.callback_query(F.data == "confirm_restart_wireguard")
async def cb_confirm_restart_wireguard(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    success = vpn_manager.restart_wireguard()
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–ª—É–∂–±–∞ —É—Å–ø–µ–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    await asyncio.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    status = vpn_manager.check_wireguard_status()
    
    if success and status['is_active']:
        await callback.message.edit_text(
            "‚úÖ WireGuard —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            reply_markup=back_to_setup_kb()
        )
    else:
        error_text = status['error'] if status['error'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ WireGuard\n\n{error_text}",
            reply_markup=back_to_setup_kb()
        )

@router.callback_query(F.data == "setup_reinstall_wireguard")
async def cb_reinstall_wireguard(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.set_state(SetupStates.waiting_confirmation)
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WireGuard.\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–ª—É–∂–±—É WireGuard\n"
        "- –£–¥–∞–ª–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "- –°–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "- –ü–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=setup_confirm_kb("confirm_reinstall_wireguard")
    )

@router.callback_query(F.data == "confirm_reinstall_wireguard")
async def cb_confirm_reinstall_wireguard(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ WireGuard... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—É WireGuard
        subprocess.run(['systemctl', 'stop', 'wg-quick@wg0'], check=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        backup_time = datetime.now().strftime("%Y%m%d%H%M%S")
        if os.path.exists(WG_CONFIG_PATH):
            os.rename(WG_CONFIG_PATH, f"{WG_CONFIG_PATH}.backup-{backup_time}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
        subprocess.run(
            ['wg', 'genkey'], 
            stdout=open(WG_SERVER_PRIVKEY_PATH, 'w'),
            check=True
        )
        
        subprocess.run(
            ['wg', 'pubkey'], 
            stdin=open(WG_SERVER_PRIVKEY_PATH, 'r'),
            stdout=open(WG_SERVER_PUBKEY_PATH, 'w'),
            check=True
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(WG_SERVER_PRIVKEY_PATH, 'r') as f:
            server_private_key = f.read().strip()
        
        with open(WG_CONFIG_PATH, 'w') as f:
            f.write(f'''[Interface]
PrivateKey = {server_private_key}
Address = 10.0.0.1/24
ListenPort = 51820
SaveConfig = false
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o $(ip route | grep default | awk '{{print $5}}') -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o $(ip route | grep default | awk '{{print $5}}') -j MASQUERADE

# –ö–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å
''')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º IP-—Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥
        with open('/etc/sysctl.d/99-wireguard.conf', 'w') as f:
            f.write('net.ipv4.ip_forward = 1\n')
        
        subprocess.run(['sysctl', '-p', '/etc/sysctl.d/99-wireguard.conf'], check=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—É WireGuard
        subprocess.run(['systemctl', 'enable', 'wg-quick@wg0'], check=True)
        subprocess.run(['systemctl', 'start', 'wg-quick@wg0'], check=True)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        await asyncio.sleep(3)
        status = vpn_manager.check_wireguard_status()
        
        if status['is_active']:
            await callback.message.edit_text(
                "‚úÖ WireGuard —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!\n\n"
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
                reply_markup=back_to_setup_kb()
            )
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è WireGuard –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω.\n\n"
                f"–û—à–∏–±–∫–∞: {status['error'] if status['error'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.",
                reply_markup=back_to_setup_kb()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–µ WireGuard:\n\n{str(e)}",
            reply_markup=back_to_setup_kb()
        )

@router.callback_query(F.data == "setup_update_server_info")
async def cb_update_server_info(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.set_state(SetupStates.waiting_server_ip)
    
    await callback.message.edit_text(
        "üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è):",
        reply_markup=back_to_setup_kb()
    )

@router.message(SetupStates.waiting_server_ip)
async def process_server_ip(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        await state.clear()
        return
    
    server_ip = message.text.strip()
    
    # –ï—Å–ª–∏ IP –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if not server_ip:
        try:
            import requests
            server_ip = requests.get('https://api.ipify.org').text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ IP-–∞–¥—Ä–µ—Å–∞: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:",
                reply_markup=back_to_setup_kb()
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç IP
    import re
    if not re.match(r'^(\d{1,3}\.){3}\d{1,3}$', server_ip):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IPv4 –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.1):",
            reply_markup=back_to_setup_kb()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IP –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(server_ip=server_ip)
    await state.set_state(SetupStates.waiting_server_port)
    
    await message.answer(
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç WireGuard (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 51820):"
    )

@router.message(SetupStates.waiting_server_port)
async def process_server_port(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        await state.clear()
        return
    
    port_text = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not port_text:
        server_port = 51820
    else:
        try:
            server_port = int(port_text)
            if server_port < 1 or server_port > 65535:
                raise ValueError("–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 65535")
        except ValueError as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç (–æ—Ç 1 –¥–æ 65535):",
                reply_markup=back_to_setup_kb()
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    server_ip = data.get('server_ip')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await settings_model.update_setting('SERVER_IP', server_ip)
    await settings_model.update_setting('SERVER_PORT', str(server_port))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    with open('.env', 'r') as f:
        env_content = f.readlines()
    
    new_env_content = []
    ip_updated = False
    port_updated = False
    
    for line in env_content:
        if line.startswith('SERVER_IP='):
            new_env_content.append(f'SERVER_IP={server_ip}\n')
            ip_updated = True
        elif line.startswith('SERVER_PORT='):
            new_env_content.append(f'SERVER_PORT={server_port}\n')
            port_updated = True
        else:
            new_env_content.append(line)
    
    if not ip_updated:
        new_env_content.append(f'SERVER_IP={server_ip}\n')
    
    if not port_updated:
        new_env_content.append(f'SERVER_PORT={server_port}\n')
    
    with open('.env', 'w') as f:
        f.writelines(new_env_content)
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
        f"IP-–∞–¥—Ä–µ—Å: {server_ip}\n"
        f"–ü–æ—Ä—Ç: {server_port}\n\n"
        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
        reply_markup=setup_main_kb()
    )

@router.callback_query(F.data == "setup_back")
async def cb_setup_back(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        f"üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPN-—Å–µ—Ä–≤–µ—Ä–∞ RuCoder\n"
        f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=setup_main_kb()
    )

@router.callback_query(F.data == "setup_exit")
async def cb_setup_exit(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        f"üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é RuCoder VPN\n\n"
        f"–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, "
        f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin",
        reply_markup=None
    )

def register_setup_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    dp.include_router(router)
