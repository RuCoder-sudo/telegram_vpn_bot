#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è VPN-–±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: RUCODER (https://—Ä—É–∫–æ–¥–µ—Ä.—Ä—Ñ/vpn)
"""

import os
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import (
    ADMIN_IDS, CLIENTS_DIR, BOT_VERSION, COPYRIGHT, 
    SUPPORT_CONTACT, WEBSITE_URL, TEMPLATES_DIR
)
from keyboards.user_kb import (
    start_kb, help_kb, profile_kb, feedback_kb,
    setup_kb, faq_kb, back_to_main_kb
)
from database.models import ClientModel, FeedbackModel
from utils.qr_generator import generate_qr_from_config
from utils.speed_test import run_speed_test

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–µ–ª–µ–π
client_model = ClientModel()
feedback_model = FeedbackModel()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class UserStates(StatesGroup):
    feedback = State()
    view_profile = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
def read_template(filename):
    """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    try:
        file_path = os.path.join(TEMPLATES_DIR, filename)
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ {filename}: {e}")
        return f"–®–∞–±–ª–æ–Ω {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
    client = await client_model.get_client_by_user_id(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞
    welcome_text = read_template("welcome.txt")
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
    welcome_text = welcome_text.replace("{first_name}", first_name)
    welcome_text = welcome_text.replace("{bot_version}", BOT_VERSION)
    welcome_text = welcome_text.replace("{copyright}", COPYRIGHT)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = start_kb(user_id in ADMIN_IDS, client is not None)
    
    await message.answer(welcome_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    help_text = (
        "üîç –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ\n\n"
    )
    
    if message.from_user.id in ADMIN_IDS:
        help_text += (
            "üë®‚Äçüíª –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/addclient - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
        )
    
    help_text += (
        f"üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_CONTACT}\n"
        f"üåê –í–µ–±-—Å–∞–π—Ç: {WEBSITE_URL}\n\n"
        f"{COPYRIGHT}"
    )
    
    await message.answer(help_text, reply_markup=help_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
@router.message(Command("about"))
async def cmd_about(message: Message):
    about_text = read_template("about.txt")
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
    about_text = about_text.replace("{bot_version}", BOT_VERSION)
    about_text = about_text.replace("{support_contact}", SUPPORT_CONTACT)
    about_text = about_text.replace("{website_url}", WEBSITE_URL)
    about_text = about_text.replace("{copyright}", COPYRIGHT)
    
    await message.answer(about_text, reply_markup=start_kb(message.from_user.id in ADMIN_IDS, False))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client = await client_model.get_client_by_user_id(user_id)
    
    if not client:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è VPN.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    await show_user_profile(message, client)

async def show_user_profile(message, client):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    client_id, name, user_id, email, create_date, expiry_date, last_connection, is_active, is_blocked, *_ = client
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
    if is_blocked:
        status = "‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    elif not is_active:
        status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    else:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è
    if expiry_date:
        expiry_date_obj = datetime.strptime(expiry_date, "%Y-%m-%d %H:%M:%S")
        now = datetime.now()
        
        if expiry_date_obj > now:
            days_left = (expiry_date_obj - now).days
            expiry_info = f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {expiry_date} ({days_left} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)"
        else:
            expiry_info = f"‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –∏—Å—Ç–µ–∫ {expiry_date}"
    else:
        expiry_info = "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –±–µ—Å—Å—Ä–æ—á–Ω–æ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å RuCoder VPN\n\n"
        f"üÜî ID: {client_id}\n"
        f"üë§ –ò–º—è: {name}\n"
        f"{status}\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {create_date}\n"
        f"{expiry_info}\n"
    )
    
    if last_connection:
        text += f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {last_connection}\n"
    
    if email:
        text += f"üìß Email: {email}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    if is_active and not is_blocked:
        text += "\nüîß –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    
    await message.answer(
        text,
        reply_markup=profile_kb(is_active and not is_blocked)
    )

@router.callback_query(F.data == "download_config")
async def cb_download_config(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client = await client_model.get_client_by_user_id(user_id)
    
    if not client:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è VPN.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=back_to_main_kb()
        )
        return
    
    client_id, name, *_ = client
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    config_path = os.path.join(CLIENTS_DIR, name, f"{name}.conf")
    
    if not os.path.exists(config_path):
        await callback.message.edit_text(
            "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=back_to_main_kb()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await callback.bot.send_document(
        user_id,
        FSInputFile(config_path),
        caption="üìã –í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard"
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
    qr_path = await generate_qr_from_config(config_path)
    
    if qr_path:
        await callback.bot.send_photo(
            user_id,
            FSInputFile(qr_path),
            caption="üîÑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞
        os.remove(qr_path)
    
    await callback.message.edit_text(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n"
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WireGuard –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=setup_kb()
    )

@router.callback_query(F.data == "show_qr")
async def cb_show_qr(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client = await client_model.get_client_by_user_id(user_id)
    
    if not client:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è VPN.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=back_to_main_kb()
        )
        return
    
    client_id, name, *_ = client
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    config_path = os.path.join(CLIENTS_DIR, name, f"{name}.conf")
    
    if not os.path.exists(config_path):
        await callback.message.edit_text(
            "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=back_to_main_kb()
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
    qr_path = await generate_qr_from_config(config_path)
    
    if qr_path:
        await callback.message.answer_photo(
            FSInputFile(qr_path),
            caption="üîÑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞
        os.remove(qr_path)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WireGuard –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:",
            reply_markup=setup_kb()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=back_to_main_kb()
        )

@router.callback_query(F.data.startswith("setup_"))
async def cb_setup_instructions(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    await callback.answer()
    
    device_type = callback.data.split("_")[1]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    template_name = f"setup_{device_type}.txt"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    instructions = read_template(template_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    client = await client_model.get_client_by_user_id(user_id)
    
    if client:
        client_name = client[1]  # name - –∏–Ω–¥–µ–∫—Å 1
        instructions = instructions.replace("{client_name}", client_name)
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    instructions = instructions.replace("{support_contact}", SUPPORT_CONTACT)
    instructions = instructions.replace("{website_url}", WEBSITE_URL)
    instructions = instructions.replace("{copyright}", COPYRIGHT)
    
    await callback.message.edit_text(
        instructions,
        reply_markup=back_to_main_kb()
    )

@router.callback_query(F.data == "user_faq")
async def cb_user_faq(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º FAQ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    faq_text = read_template("faq.txt")
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    faq_text = faq_text.replace("{support_contact}", SUPPORT_CONTACT)
    faq_text = faq_text.replace("{website_url}", WEBSITE_URL)
    faq_text = faq_text.replace("{copyright}", COPYRIGHT)
    
    await callback.message.edit_text(
        faq_text,
        reply_markup=faq_kb()
    )

@router.callback_query(F.data == "user_feedback")
async def cb_user_feedback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(UserStates.feedback)
    
    await callback.message.edit_text(
        "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. "
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=back_to_main_kb()
    )

@router.message(UserStates.feedback)
async def process_feedback(message: Message, state: FSMContext):
    user_id = message.from_user.id
    feedback_text = message.text
    
    if not feedback_text:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=back_to_main_kb()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    feedback_id = await feedback_model.create_feedback(user_id, feedback_text)
    
    if feedback_id:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n\n"
            f"–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=back_to_main_kb()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        for admin_id in ADMIN_IDS:
            try:
                client = await client_model.get_client_by_user_id(user_id)
                client_name = client[1] if client else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                
                admin_notification = (
                    f"üì´ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!\n\n"
                    f"–û—Ç: {client_name}\n"
                    f"ID: {user_id}\n\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{feedback_text}"
                )
                
                await message.bot.send_message(admin_id, admin_notification)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: {SUPPORT_CONTACT}",
            reply_markup=back_to_main_kb()
        )
    
    await state.clear()

@router.callback_query(F.data == "user_back")
async def cb_user_back(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = callback.from_user.id
    client = await client_model.get_client_by_user_id(user_id)
    
    await callback.message.edit_text(
        f"üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é RuCoder VPN\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_kb(user_id in ADMIN_IDS, client is not None)
    )

@router.callback_query(F.data == "faq_question_1")
async def cb_faq_question_1(callback: CallbackQuery):
    await callback.answer()
    
    question_text = (
        "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ WireGuard?\n\n"
        "WireGuard ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π VPN-–ø—Ä–æ—Ç–æ–∫–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç "
        "–∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞ –±–∞—Ç–∞—Ä–µ—é –∏ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã.\n\n"
        "–û–Ω –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—â–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, —á–µ–º –¥—Ä—É–≥–∏–µ VPN-–ø—Ä–æ—Ç–æ–∫–æ–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ OpenVPN –∏–ª–∏ IPSec."
    )
    
    await callback.message.edit_text(
        question_text,
        reply_markup=faq_kb()
    )

@router.callback_query(F.data == "faq_question_2")
async def cb_faq_question_2(callback: CallbackQuery):
    await callback.answer()
    
    question_text = (
        "‚ùì –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WireGuard –Ω–∞ –º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "   ‚Ä¢ iOS: App Store\n"
        "   ‚Ä¢ Android: Google Play\n"
        "   ‚Ä¢ Windows: wireguard.com/install\n"
        "   ‚Ä¢ macOS: App Store –∏–ª–∏ wireguard.com/install\n"
        "   ‚Ä¢ Linux: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞—à–µ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞\n\n"
        "2. –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª, "
        "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç–æ–º, –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
    
    await callback.message.edit_text(
        question_text,
        reply_markup=faq_kb()
    )

@router.callback_query(F.data == "faq_question_3")
async def cb_faq_question_3(callback: CallbackQuery):
    await callback.answer()
    
    question_text = (
        "‚ùì –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ VPN –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è?\n\n"
        "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—ë –∑–∞–Ω–æ–≤–æ –∏–∑ –±–æ—Ç–∞.\n\n"
        "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n\n"
        "3. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ç–∏ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é —Å–µ—Ç—å.\n\n"
        "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞.\n\n"
        f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_CONTACT}"
    )
    
    await callback.message.edit_text(
        question_text,
        reply_markup=faq_kb()
    )

@router.callback_query(F.data == "faq_question_4")
async def cb_faq_question_4(callback: CallbackQuery):
    await callback.answer()
    
    question_text = (
        "‚ùì –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–µ–≥–æ VPN-–¥–æ—Å—Ç—É–ø–∞?\n\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ VPN-–¥–æ—Å—Ç—É–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. "
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ "
        "–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /profile.\n\n"
        f"–ï—Å–ª–∏ –≤–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫ –∏–ª–∏ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {SUPPORT_CONTACT}"
    )
    
    await callback.message.edit_text(
        question_text,
        reply_markup=faq_kb()
    )

@router.callback_query(F.data == "faq_question_5")
async def cb_faq_question_5(callback: CallbackQuery):
    await callback.answer()
    
    question_text = (
        "‚ùì –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç VPN?\n\n"
        "–î–∞, –Ω–∞—à VPN-—Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª WireGuard, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç "
        "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤–æ–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤\n"
        "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫ DNS\n"
        "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
        "–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –Ω–∏–∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."
    )
    
    await callback.message.edit_text(
        question_text,
        reply_markup=faq_kb()
    )

@router.callback_query(F.data == "speed_test")
async def cb_speed_test(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    await callback.answer("‚è≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(
        "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...\n\n"
        "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞...\n"
        "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 15 –¥–æ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        reply_markup=None
    )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = await run_speed_test()
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        full_text = (
            "‚úÖ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"{results_text}\n\n"
            f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑: RuCoder VPN\n"
            f"‚è± –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "
            f"–∏ —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ç—å."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.edit_text(
            full_text,
            reply_markup=profile_kb()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=profile_kb()
        )

def register_user_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.include_router(router)
