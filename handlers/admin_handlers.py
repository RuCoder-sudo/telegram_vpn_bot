#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è VPN-–±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: RUCODER (https://—Ä—É–∫–æ–¥–µ—Ä.—Ä—Ñ/vpn)
"""

import os
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_IDS, CLIENTS_DIR, BOT_VERSION, COPYRIGHT, WG_CONFIG_PATH
from keyboards.admin_kb import (
    admin_main_kb, client_list_kb, client_manage_kb, admin_stats_kb,
    confirm_action_kb, monitoring_kb, broadcast_kb, back_to_admin_kb,
    paginate_kb, generate_clients_kb
)
from database.models import ClientModel, StatsModel, NotificationModel, ServerMetricsModel
from utils.vpn_manager import VPNManager

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–µ–ª–µ–π
client_model = ClientModel()
stats_model = StatsModel()
notification_model = NotificationModel()
metrics_model = ServerMetricsModel()
vpn_manager = VPNManager()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class AdminStates(StatesGroup):
    add_client = State()
    edit_client = State()
    delete_client = State()
    block_client = State()
    broadcast_message = State()
    client_expiry = State()
    send_feedback_response = State()
    server_monitoring = State()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in ADMIN_IDS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    await message.answer(
        f"üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ RuCoder VPN\n"
        f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"
@router.callback_query(F.data == "admin_list_clients")
async def cb_list_clients(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    clients = await client_model.get_all_clients()
    
    if not clients:
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç",
            reply_markup=back_to_admin_kb()
        )
        return
    
    page = 1
    total_pages = (len(clients) + 4) // 5  # 5 –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    await show_clients_page(callback.message, clients, page, total_pages)

async def show_clients_page(message, clients, page, total_pages):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    start_idx = (page - 1) * 5
    end_idx = min(start_idx + 5, len(clients))
    
    page_clients = clients[start_idx:end_idx]
    
    text = f"üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    
    for client in page_clients:
        # –§–æ—Ä–º–∞—Ç: ID, –∏–º—è, —Å—Ç–∞—Ç—É—Å, –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è, –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        client_id, name, user_id, email, create_date, expiry_date, is_active, is_blocked, *_ = client
        
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active and not is_blocked else "‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        expiry_info = f"–¥–æ {expiry_date}" if expiry_date else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
        
        text += f"üÜî {client_id} | üë§ {name} | {status}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω: {create_date} | ‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç: {expiry_info}\n"
        if user_id:
            text += f"üîó Telegram ID: {user_id}\n"
        if email:
            text += f"üìß Email: {email}\n"
        text += "\n"
    
    await message.edit_text(
        text,
        reply_markup=generate_clients_kb(clients, page, total_pages)
    )

@router.callback_query(F.data.startswith("client_page_"))
async def cb_client_page(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    page = int(callback.data.split("_")[-1])
    clients = await client_model.get_all_clients()
    
    if not clients:
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç",
            reply_markup=back_to_admin_kb()
        )
        return
    
    total_pages = (len(clients) + 4) // 5  # 5 –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    await show_clients_page(callback.message, clients, page, total_pages)

@router.callback_query(F.data.startswith("manage_client_"))
async def cb_manage_client(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    client_id = int(callback.data.split("_")[-1])
    client = await client_model.get_client_by_id(client_id)
    
    if not client:
        await callback.message.edit_text(
            "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=back_to_admin_kb()
        )
        return
    
    client_id, name, user_id, email, create_date, expiry_date, last_connection, is_active, is_blocked, allowed_ips, public_key, private_key, data_limit, data_used = client
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active and not is_blocked else "‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    expiry_info = f"–¥–æ {expiry_date}" if expiry_date else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    connection_info = f"{last_connection}" if last_connection else "–Ω–∏–∫–æ–≥–¥–∞"
    
    data_limit_str = f"{data_limit/(1024*1024*1024):.2f} –ì–ë" if data_limit else "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"
    data_used_str = f"{data_used/(1024*1024*1024):.2f} –ì–ë" if data_used else "0 –ì–ë"
    
    text = f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º:\n\n"
    text += f"üÜî ID: {client_id}\n"
    text += f"üë§ –ò–º—è: {name}\n"
    text += f"üì± –°—Ç–∞—Ç—É—Å: {status}\n"
    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {create_date}\n"
    text += f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç: {expiry_info}\n"
    text += f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {connection_info}\n"
    text += f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {data_limit_str}\n"
    text += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {data_used_str}\n"
    
    if user_id:
        text += f"üîó Telegram ID: {user_id}\n"
    if email:
        text += f"üìß Email: {email}\n"
    if allowed_ips:
        text += f"üåê –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ IP: {allowed_ips}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=client_manage_kb(client_id, is_active, is_blocked)
    )

@router.callback_query(F.data.startswith("toggle_client_"))
async def cb_toggle_client(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –§–æ—Ä–º–∞—Ç: toggle_client_{action}_{client_id}
    parts = callback.data.split("_")
    action = parts[2]
    client_id = int(parts[3])
    
    client = await client_model.get_client_by_id(client_id)
    
    if not client:
        await callback.message.edit_text(
            "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=back_to_admin_kb()
        )
        return
    
    if action == "activate":
        await client_model.update_client(client_id, is_active=1)
        await callback.message.edit_text(
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client[1]} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=back_to_admin_kb()
        )
    elif action == "deactivate":
        await client_model.update_client(client_id, is_active=0)
        await callback.message.edit_text(
            f"‚ùå –ö–ª–∏–µ–Ω—Ç {client[1]} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=back_to_admin_kb()
        )
    elif action == "block":
        await client_model.update_client(client_id, is_blocked=1)
        await callback.message.edit_text(
            f"‚õî –ö–ª–∏–µ–Ω—Ç {client[1]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=back_to_admin_kb()
        )
    elif action == "unblock":
        await client_model.update_client(client_id, is_blocked=0)
        await callback.message.edit_text(
            f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞ {client[1]}",
            reply_markup=back_to_admin_kb()
        )

@router.callback_query(F.data.startswith("delete_client_"))
async def cb_delete_client_confirm(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    client_id = int(callback.data.split("_")[-1])
    client = await client_model.get_client_by_id(client_id)
    
    if not client:
        await callback.message.edit_text(
            "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=back_to_admin_kb()
        )
        return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client[1]}?\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_action_kb(f"confirm_delete_{client_id}")
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def cb_delete_client(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    client_id = int(callback.data.split("_")[-1])
    client = await client_model.get_client_by_id(client_id)
    
    if not client:
        await callback.message.edit_text(
            "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=back_to_admin_kb()
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ WireGuard
    success = vpn_manager.delete_client(client[1], client[10])  # name, public_key
    
    if success:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await client_model.delete_client(client_id)
        await callback.message.edit_text(
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client[1]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=back_to_admin_kb()
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client[1]} –∏–∑ WireGuard",
            reply_markup=back_to_admin_kb()
        )

@router.callback_query(F.data == "admin_add_client")
async def cb_add_client(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.set_state(AdminStates.add_client)
    
    await callback.message.edit_text(
        "üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è):",
        reply_markup=back_to_admin_kb()
    )

@router.message(AdminStates.add_client)
async def process_client_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏
    client_name = message.text.strip()
    if not client_name.replace("_", "").isalnum():
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
            reply_markup=back_to_admin_kb()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    existing_client = await client_model.get_client_by_name(client_name)
    if existing_client:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º {client_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:",
            reply_markup=back_to_admin_kb()
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ VPN-–∫–ª–∏–µ–Ω—Ç–∞
    await message.answer("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
    client_data = vpn_manager.create_client(client_name)
    
    if not client_data:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN",
            reply_markup=admin_main_kb()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    client = await client_model.create_client(
        client_name,
        public_key=client_data["public_key"],
        private_key=client_data["private_key"]
    )
    
    if not client:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=admin_main_kb()
        )
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    config_path = os.path.join(CLIENTS_DIR, client_name, f"{client_name}.conf")
    
    if os.path.exists(config_path):
        await message.answer_document(
            FSInputFile(config_path),
            caption=f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WireGuard –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        from utils.qr_generator import generate_qr_from_config
        qr_path = await generate_qr_from_config(config_path)
        
        if qr_path:
            await message.answer_photo(
                FSInputFile(qr_path),
                caption="üîÑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞
            os.remove(qr_path)
    else:
        await message.answer(
            f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {config_path}",
            reply_markup=admin_main_kb()
        )
    
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )

@router.callback_query(F.data == "admin_statistics")
async def cb_admin_statistics(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await stats_model.get_overall_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server_metrics = await metrics_model.get_latest_metrics(1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    active_clients = await client_model.get_active_clients()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RuCoder VPN\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    text += f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(await client_model.get_all_clients())}\n"
    text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(active_clients)}\n"
    text += f"üîÑ –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {stats['connections_count']}\n"
    text += f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats['active_sessions']}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
    received_gb = stats['total_received'] / (1024 * 1024 * 1024) if stats['total_received'] else 0
    sent_gb = stats['total_sent'] / (1024 * 1024 * 1024) if stats['total_sent'] else 0
    
    text += f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {received_gb:.2f} –ì–ë\n"
    text += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_gb:.2f} –ì–ë\n"
    text += f"üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: {received_gb + sent_gb:.2f} –ì–ë\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if server_metrics:
        metrics = server_metrics[0]
        timestamp, cpu, memory, disk, net_in, net_out, connections = metrics
        
        text += f"üíª –°–µ—Ä–≤–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {timestamp}):\n"
        text += f"  CPU: {cpu:.1f}%\n"
        text += f"  RAM: {memory:.1f}%\n"
        text += f"  –î–∏—Å–∫: {disk:.1f}%\n"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–∞–π—Ç—ã –≤ —É–¥–æ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        net_in_mbps = net_in * 8 / 1024 / 1024 if net_in else 0
        net_out_mbps = net_out * 8 / 1024 / 1024 if net_out else 0
        
        text += f"  –°–µ—Ç—å: ‚¨áÔ∏è {net_in_mbps:.2f} –ú–±–∏—Ç/—Å | ‚¨ÜÔ∏è {net_out_mbps:.2f} –ú–±–∏—Ç/—Å\n"
        text += f"  –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connections}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_stats_kb()
    )

@router.callback_query(F.data.startswith("stats_"))
async def cb_stats_detail(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    stats_type = callback.data.split("_")[1]
    
    if stats_type == "clients":
        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        active_clients = await client_model.get_active_clients()
        
        if not active_clients:
            await callback.message.edit_text(
                "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                reply_markup=back_to_admin_kb()
            )
            return
        
        text = "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        
        for client in active_clients[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15 –∫–ª–∏–µ–Ω—Ç–æ–≤
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ client
            client_parts = list(client)
            client_id = client_parts[0]
            name = client_parts[1]
            last_connection = client_parts[-5]
            is_active = client_parts[-4]
            is_blocked = client_parts[-3]
            data_used = client_parts[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
            client_stats = await stats_model.get_client_usage_total(client_id)
            total_received, total_sent = client_stats
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–∞–π—Ç—ã –≤ –º–µ–≥–∞–±–∞–π—Ç—ã –∏–ª–∏ –≥–∏–≥–∞–±–∞–π—Ç—ã
            def format_bytes(bytes_count):
                if bytes_count is None:
                    return "0 –ë"
                if bytes_count < 1024 * 1024:
                    return f"{bytes_count / 1024:.2f} –ö–ë"
                elif bytes_count < 1024 * 1024 * 1024:
                    return f"{bytes_count / (1024 * 1024):.2f} –ú–ë"
                else:
                    return f"{bytes_count / (1024 * 1024 * 1024):.2f} –ì–ë"
            
            text += f"üë§ {name}\n"
            text += f"  üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {last_connection or '–Ω–∏–∫–æ–≥–¥–∞'}\n"
            text += f"  üì• –ü–æ–ª—É—á–µ–Ω–æ: {format_bytes(total_received)}\n"
            text += f"  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_bytes(total_sent)}\n"
            text += f"  üìä –í—Å–µ–≥–æ: {format_bytes(total_received + total_sent)}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_kb()
        )
    
    elif stats_type == "server":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        now = datetime.now()
        yesterday = now - timedelta(days=1)
        
        server_stats = await metrics_model.get_metrics_by_period(
            yesterday.strftime("%Y-%m-%d %H:%M:%S"),
            now.strftime("%Y-%m-%d %H:%M:%S"),
            'hour'
        )
        
        if not server_stats:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞",
                reply_markup=back_to_admin_kb()
            )
            return
        
        text = "üíª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ 24 —á–∞—Å–∞:\n\n"
        
        for i, stat in enumerate(server_stats[-12:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –∑–∞–ø–∏—Å–µ–π
            period, cpu, memory, disk, net_in, net_out, connections = stat
            
            text += f"‚è∞ {period}:\n"
            text += f"  CPU: {cpu:.1f}%\n"
            text += f"  RAM: {memory:.1f}%\n"
            text += f"  –î–∏—Å–∫: {disk:.1f}%\n"
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–∞–π—Ç—ã –≤ —É–¥–æ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
            net_in_mbps = net_in * 8 / 1024 / 1024 if net_in else 0
            net_out_mbps = net_out * 8 / 1024 / 1024 if net_out else 0
            
            text += f"  –°–µ—Ç—å: ‚¨áÔ∏è {net_in_mbps:.2f} –ú–±–∏—Ç/—Å | ‚¨ÜÔ∏è {net_out_mbps:.2f} –ú–±–∏—Ç/—Å\n"
            text += f"  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connections}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_kb()
        )
    
    elif stats_type == "traffic":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        stats = await stats_model.get_overall_stats()
        daily_stats = stats["daily_stats"]
        
        if not daily_stats:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
                reply_markup=back_to_admin_kb()
            )
            return
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ –¥–Ω—è–º:\n\n"
        
        for day, connections, received, sent in daily_stats[-15:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–Ω–µ–π
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–∞–π—Ç—ã –≤ –º–µ–≥–∞–±–∞–π—Ç—ã –∏–ª–∏ –≥–∏–≥–∞–±–∞–π—Ç—ã
            received_str = f"{received / (1024*1024*1024):.2f} –ì–ë" if received and received > 1024*1024*1024 else f"{received / (1024*1024):.2f} –ú–ë" if received else "0 –ë"
            sent_str = f"{sent / (1024*1024*1024):.2f} –ì–ë" if sent and sent > 1024*1024*1024 else f"{sent / (1024*1024):.2f} –ú–ë" if sent else "0 –ë"
            
            text += f"üìÖ {day}:\n"
            text += f"  üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connections}\n"
            text += f"  üì• –ü–æ–ª—É—á–µ–Ω–æ: {received_str}\n"
            text += f"  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_str}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=back_to_admin_kb()
        )

@router.callback_query(F.data == "admin_monitoring")
async def cb_admin_monitoring(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å WireGuard
    wg_status = vpn_manager.check_wireguard_status()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    active_connections = vpn_manager.get_active_connections()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server_metrics = await metrics_model.get_latest_metrics(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    critical_events = await metrics_model.get_critical_events()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
    
    # –°—Ç–∞—Ç—É—Å WireGuard
    text += f"‚úÖ WireGuard: {'–∞–∫—Ç–∏–≤–µ–Ω' if wg_status['is_active'] else '‚ùå –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    if server_metrics:
        metrics = server_metrics[0]
        timestamp, cpu, memory, disk, net_in, net_out, connections = metrics
        
        text += f"üíª –°–µ—Ä–≤–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {timestamp}):\n"
        text += f"  CPU: {cpu:.1f}%\n"
        text += f"  RAM: {memory:.1f}%\n"
        text += f"  –î–∏—Å–∫: {disk:.1f}%\n"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–∞–π—Ç—ã –≤ —É–¥–æ–±–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        net_in_mbps = net_in * 8 / 1024 / 1024 if net_in else 0
        net_out_mbps = net_out * 8 / 1024 / 1024 if net_out else 0
        
        text += f"  –°–µ—Ç—å: ‚¨áÔ∏è {net_in_mbps:.2f} –ú–±–∏—Ç/—Å | ‚¨ÜÔ∏è {net_out_mbps:.2f} –ú–±–∏—Ç/—Å\n"
        text += f"  –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connections}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
    text += f"üîå –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({len(active_connections)}):\n\n"
    
    if active_connections:
        for i, conn in enumerate(active_connections[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            endpoint = conn.get("endpoint", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            latest_handshake = conn.get("latest_handshake", "–Ω–∏–∫–æ–≥–¥–∞")
            received = conn.get("received", "0 B")
            sent = conn.get("sent", "0 B")
            
            text += f"  {i+1}. Endpoint: {endpoint}\n"
            text += f"     Handshake: {latest_handshake}\n"
            text += f"     –¢—Ä–∞—Ñ–∏–∫: ‚¨áÔ∏è {received} | ‚¨ÜÔ∏è {sent}\n\n"
    else:
        text += "  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n\n"
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    if critical_events:
        text += f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è ({len(critical_events)}):\n\n"
        for i, event in enumerate(critical_events[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è
            timestamp, cpu, memory, disk, *_ = event
            
            text += f"  {i+1}. {timestamp}:\n"
            if cpu > 80:
                text += f"     CPU: {cpu:.1f}% ‚ö†Ô∏è\n"
            if memory > 80:
                text += f"     RAM: {memory:.1f}% ‚ö†Ô∏è\n"
            if disk > 90:
                text += f"     –î–∏—Å–∫: {disk:.1f}% ‚ö†Ô∏è\n"
            text += "\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=monitoring_kb()
    )

@router.callback_query(F.data == "restart_wireguard")
async def cb_restart_wireguard(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard...")
    
    success = vpn_manager.restart_wireguard()
    
    if success:
        await callback.message.edit_text(
            "‚úÖ WireGuard —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω",
            reply_markup=back_to_admin_kb()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ WireGuard",
            reply_markup=back_to_admin_kb()
        )

@router.callback_query(F.data == "admin_broadcast")
async def cb_admin_broadcast(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.set_state(AdminStates.broadcast_message)
    
    await callback.message.edit_text(
        "üì£ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=back_to_admin_kb()
    )

@router.message(AdminStates.broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        await state.clear()
        return
    
    broadcast_text = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(broadcast_text=broadcast_text)
    
    preview_text = f"üì£ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{broadcast_text}\n\n"
    preview_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(
        preview_text,
        reply_markup=broadcast_kb()
    )

@router.callback_query(F.data == "send_broadcast")
async def cb_send_broadcast(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text", "")
    
    if not broadcast_text:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=back_to_admin_kb()
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å Telegram ID
    clients = await client_model.get_all_clients()
    telegram_users = [client for client in clients if client[2]]  # user_id - –∏–Ω–¥–µ–∫—Å 2
    
    if not telegram_users:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏",
            reply_markup=back_to_admin_kb()
        )
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    sent_count = 0
    failed_count = 0
    
    await callback.message.edit_text(
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π {len(telegram_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
    )
    
    bot = callback.bot
    
    for client in telegram_users:
        try:
            await bot.send_message(
                client[2],  # user_id
                f"üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ RuCoder VPN:\n\n{broadcast_text}\n\n{COPYRIGHT}"
            )
            sent_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {client[2]}: {e}")
            failed_count += 1
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
        await asyncio.sleep(0.1)
    
    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"  ‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"  ‚úó –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed_count}\n",
        reply_markup=back_to_admin_kb()
    )
    
    await state.clear()

@router.callback_query(F.data == "admin_back")
async def cb_admin_back(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        f"üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ RuCoder VPN\n"
        f"–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_kb()
    )

@router.callback_query(F.data == "admin_system_status")
async def cb_system_status(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard
    wg_config_exists = os.path.exists(WG_CONFIG_PATH)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã WireGuard
    wg_service_status = vpn_manager.check_wireguard_status()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
    
    # WireGuard
    text += "üîí WireGuard:\n"
    text += f"  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ –Ω–∞–π–¥–µ–Ω–∞' if wg_config_exists else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}\n"
    text += f"  ‚Ä¢ –°–ª—É–∂–±–∞: {'‚úÖ –∞–∫—Ç–∏–≤–Ω–∞' if wg_service_status['is_active'] else '‚ùå –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    text += "\nü§ñ –ë–æ—Ç:\n"
    text += f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: {BOT_VERSION}\n"
    text += f"  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    disk_usage = os.statvfs('/')
    free_disk_space = disk_usage.f_bavail * disk_usage.f_frsize / (1024 * 1024 * 1024)
    total_disk_space = disk_usage.f_blocks * disk_usage.f_frsize / (1024 * 1024 * 1024)
    
    # –ö–ª–∏–µ–Ω—Ç—ã
    total_clients = len(await client_model.get_all_clients())
    active_clients = len(await client_model.get_active_clients())
    
    text += "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    text += f"  ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
    text += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {active_clients}\n"
    text += f"  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –Ω–∞ –¥–∏—Å–∫–µ: {free_disk_space:.2f} –ì–ë / {total_disk_space:.2f} –ì–ë\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=back_to_admin_kb()
    )

def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dp.include_router(router)
